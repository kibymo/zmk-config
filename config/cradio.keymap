// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors/num_word.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 32 33>;
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31>;
            hold-trigger-on-release;
        };

        caps_word: caps_word {
            compatible = "zmk,behavior-caps-word";

            //label = "CAPS_WORD";

            #binding-cells = <0>;
            continue-list = <UNDERSCORE BACKSPACE DELETE>;
        };

        num_word: num_word {
            compatible = "zmk,behavior-auto-layer";
            #binding-cells = <1>;
            continue-list = <BACKSPACE DELETE DOT COMMA PLUS MINUS STAR FSLH EQUAL>;
            ignore-numbers;
        };

        nav_word: nav_word {
            compatible = "zmk,behavior-auto-layer";
            #binding-cells = <1>;
            continue-list = <LEFT DOWN UP RIGHT PG_DN PG_UP R X D U>;
            ignore-modifiers;
        };
    };

    //    conditional_layers {
    //        compatible = "zmk,conditional-layers";
    //        tri_layer {
    //            if-layers = <1 2>;
    //            then-layer = <3>;
    //        };
    //    };

    combos {
        compatible = "zmk,combos";

        combo_under {
            bindings = <&kp UNDER>;
            key-positions = <5 6>;
            timeout-ms = <50>;
        };

        combo_minus {
            bindings = <&kp MINUS>;
            key-positions = <15 16>;
            timeout-ms = <50>;
        };

        combo_plus {
            bindings = <&kp COLON>;
            key-positions = <6 7>;
            timeout-ms = <50>;
        };

        combo_equal {
            bindings = <&kp SEMI>;
            key-positions = <16 17>;
            timeout-ms = <50>;
        };

        combo_colon {
            bindings = <&kp DQT>;
            key-positions = <7 8>;
            timeout-ms = <50>;
        };

        combo_semi {
            bindings = <&kp SQT>;
            key-positions = <17 18>;
            timeout-ms = <50>;
        };

        combo_dqt {
            bindings = <&kp PLUS>;
            key-positions = <8 9>;
            timeout-ms = <50>;
        };

        combo_sqt {
            bindings = <&kp EQUAL>;
            key-positions = <18 19>;
            timeout-ms = <50>;
        };

        combo_pipe {
            bindings = <&kp PIPE>;
            key-positions = <19 9>;
            timeout-ms = <50>;
        };

        combo_qmark {
            bindings = <&kp BSLH>;
            key-positions = <19 29>;
            timeout-ms = <50>;
        };

        combo_lbkt {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <25 26>;
            timeout-ms = <50>;
        };

        combo_rbkt {
            bindings = <&kp RBKT>;
            key-positions = <26 27>;
            timeout-ms = <50>;
        };

        combo_tilde {
            bindings = <&kp TILDE>;
            key-positions = <0 10>;
            timeout-ms = <50>;
        };

        combo_grave {
            bindings = <&kp GRAVE>;
            key-positions = <10 20>;
            timeout-ms = <50>;
        };

        combo_excl {
            bindings = <&kp EXCL>;
            key-positions = <1 0>;
            timeout-ms = <50>;
        };

        combo_percent {
            bindings = <&kp PERCENT>;
            key-positions = <11 10>;
            timeout-ms = <50>;
        };

        combo_at {
            bindings = <&kp AT>;
            key-positions = <2 1>;
            timeout-ms = <50>;
        };

        combo_caret {
            bindings = <&kp CARET>;
            key-positions = <12 11>;
            timeout-ms = <50>;
        };

        combo_hash {
            bindings = <&kp HASH>;
            key-positions = <3 2>;
            timeout-ms = <50>;
        };

        combo_amps {
            bindings = <&kp AMPS>;
            key-positions = <13 12>;
            timeout-ms = <50>;
        };

        combo_dllr {
            bindings = <&kp DLLR>;
            key-positions = <4 3>;
            timeout-ms = <50>;
        };

        combo_astrk {
            bindings = <&kp ASTRK>;
            key-positions = <14 13>;
            timeout-ms = <50>;
        };

        combo_lbrc {
            bindings = <&kp LBRC>;
            key-positions = <22 23>;
            timeout-ms = <50>;
        };

        combo_rbrc {
            bindings = <&kp RBRC>;
            key-positions = <23 24>;
            timeout-ms = <50>;
        };

        combo_lpar {
            bindings = <&kp LPAR>;
            key-positions = <21 20>;
            timeout-ms = <50>;
        };

        combo_rpar {
            bindings = <&kp RPAR>;
            key-positions = <21 22>;
            timeout-ms = <50>;
        };

        combo_n1 {
            bindings = <&kp N1>;
            key-positions = <26 16>;
            timeout-ms = <50>;
        };

        combo_n2 {
            bindings = <&kp N2>;
            key-positions = <27 17>;
            timeout-ms = <50>;
        };

        combo_n3 {
            bindings = <&kp N3>;
            key-positions = <28 18>;
            timeout-ms = <50>;
        };

        combo_n4 {
            bindings = <&kp N4>;
            key-positions = <16 6>;
            timeout-ms = <50>;
        };

        combo_n5 {
            bindings = <&kp N5>;
            key-positions = <17 7>;
            timeout-ms = <50>;
        };

        combo_n6 {
            bindings = <&kp N6>;
            key-positions = <18 8>;
            timeout-ms = <50>;
        };

        combo_n7 {
            bindings = <&kp N7>;
            key-positions = <6 26>;
            timeout-ms = <50>;
        };

        combo_n8 {
            bindings = <&kp N8>;
            key-positions = <7 27>;
            timeout-ms = <50>;
        };

        combo_n9 {
            bindings = <&kp N9>;
            key-positions = <8 28>;
            timeout-ms = <50>;
        };

        combo_n0 {
            bindings = <&kp N0>;
            key-positions = <25 15>;
            timeout-ms = <50>;
        };

        combo_del {
            bindings = <&kp DEL>;
            key-positions = <29 28>;
            timeout-ms = <50>;
        };

        combo_caps_word {
            bindings = <&caps_word>;
            key-positions = <0 20>;
            timeout-ms = <50>;
        };

//        combo_nav_word_layer3 {
//            bindings = <&nav_word 3>;
//            key-positions = <25 5>;
//            timeout-ms = <50>;
//        };

//        combo_num_word_layer2 {
//            bindings = <&num_word 2>;
//            key-positions = <16 18>;
//            timeout-ms = <50>;
//        };

        combo_ctrl_spc {
            bindings = <&kp LC(LS(SPACE))>;
            key-positions = <31 20>;
            timeout-ms = <50>;
        };

        combo_ctrl_z {
            bindings = <&kp LC(Z)>;
            key-positions = <22 10>;
        };

        combo_up {
            bindings = <&kp UP>;
            key-positions = <33 25>;
        };

        combo_down {
            bindings = <&kp DOWN>;
            key-positions = <33 27>;
        };

        combo_left {
            bindings = <&kp LEFT>;
            key-positions = <33 26>;
        };

        combo_right {
            bindings = <&kp RIGHT>;
            key-positions = <28 33>;
        };

        combo_esc {
            bindings = <&kp ESC>;
            key-positions = <0 11>;
        };

        combo_tab {
            bindings = <&kp TAB>;
            key-positions = <10 13>;
        };

        combo_enter {
            bindings = <&kp ENTER>;
            key-positions = <16 19>;
        };

        t1 {
            bindings = <&macro_grep>;
            key-positions = <1 3>;
        };

        t2 {
            bindings = <&macro_ckcu>;
            key-positions = <11 13>;
        };

        t3 {
            bindings = <&kp LS(LA(LC(DOWN)))>;
            key-positions = <21 23>;
        };

        t4 {
            bindings = <&macro_grep>;
            key-positions = <18 9>;
        };
    };

    macros {
        macro_grep: macro_grep {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp PIPE &kp G &kp R &kp E &kp P &kp SPACE>;
            label = "MACRO_GREP";
        };

        macro_ckcu: macro_ckcu {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(K) &kp LC(U)>;
            label = "MACRO_CKCU";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q         &kp W        &kp F         &kp P            &kp B          &kp J        &kp L        &kp U             &kp Y             &kp BACKSPACE
&kp A         &kp R        &kp S         &kp T            &kp G          &kp M        &kp N        &kp E             &kp I             &kp O
&hml LCTRL Z  &hml LALT X  &hml LSHFT C  &hml LEFT_GUI D  &kp V          &kp K        &hmr RGUI H  &hmr RSHFT COMMA  &hmr RALT PERIOD  &hmr LCTRL SLASH
                                         &lt 4 ESC        &lt 2 SPACE    &lt 1 ENTER  &lt 3 TAB
            >;
        };

        right_layer {
            bindings = <
&kp TILDE  &kp EXCL   &kp AT     &kp POUND  &kp DLLR    &kp UNDER  &kp COLON  &kp DQT  &kp PLUS   &kp PIPE
&kp GRAVE  &kp PRCNT  &kp CARET  &kp AMPS   &kp STAR    &kp MINUS  &kp SEMI   &kp SQT  &kp EQUAL  &kp BSLH
&trans     &kp LPAR   &kp RPAR   &kp LBRC   &kp RBRC    &kp LBKT   &kp RBKT   &kp LT   &kp GT     &kp QMARK
                                 &trans     &trans      &trans     &trans
            >;
        };

        left_layer {
            bindings = <
&trans  &kp N1  &kp N2  &kp N3      &kp N4    &trans  &kp N7  &kp N8  &kp N9  &trans
&trans  &kp N5  &kp N6  &kp N7      &kp N8    &trans  &kp N4  &kp N5  &kp N6  &trans
&trans  &kp N9  &kp N0  &kp PERIOD  &trans    &trans  &kp N1  &kp N2  &kp N3  &kp DOT
                        &trans      &trans    &trans  &kp N0
            >;
        };

        tri_layer {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp DOWN  &kp RIGHT    &kp HOME  &kp END        &trans
&out OUT_USB  &kp R         &out OUT_BLE  &none         &none           &none     &kp PAGE_UP  &kp UP    &kp PAGE_DOWN  &kp U
&none         &kp X         &none         &none         &none           &kp UP    &kp LEFT     &kp DOWN  &kp RIGHT      &kp D
                                          &trans        &trans          &trans    &trans
            >;
        };

        func_layer {
            bindings = <
&none  &kp F1  &kp F2   &kp F3   &kp F4     &none  &none     &none     &none      &none
&none  &kp F5  &kp F6   &kp F7   &kp F8     &none  &none     &kp UP    &none      &none
&none  &kp F9  &kp F10  &kp F11  &kp F12    &none  &kp LEFT  &kp DOWN  &kp RIGHT  &none
                        &none    &none      &none  &none
            >;
        };
    };
};
